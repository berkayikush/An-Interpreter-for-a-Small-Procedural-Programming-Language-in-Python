---------- Compact Programming Language -----------
---------------------------------------------------
---------- Overview & Grammar & Examples ----------

------------------------
--------OVERVIEW--------
------------------------
Compact is a small programming language created by Berkay. 
It supports a range of fundamental programming concepts, including variable declaration, 
order of operations, conditional statements, loops, and functions.

The syntax of Compact is designed to be easy to read and understand.

-----------------------
--------GRAMMAR--------
-----------------------
program: statement_list

statement_list: statement_list: statement statement_list | empty_statement
statement: func_decl_statement | var_decl_statement SEMI_COLON | for_statement | 
           while_loop_statement | conditional_statement | func_call_statement SEMI_COLON | 
           assignment_statement SEMI_COLON | empty_statement

func_decl_statement: K_FUNC LEFT_PARENTHESIS return_type RIGHT_PARENTHESIS IDENTIFIER
                            LEFT_PARENTHESIS (func_params)? RIGHT_PARENTHESIS
                            LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET
return_type: K_INT | K_FLOAT | K_BOOL | K_STR | K_VOID
func_params: func_param (COMMA func_param)*
func_param = K_VAR LEFT_PARENTHESIS var_type RIGHT_PARENTHESIS var_name (ASSIGN expr)?

var_decl_statement: K_VAR LEFT_PARENTHESIS var_type RIGHT_PARENTHESIS 
                    var_name (ASSIGN logical_expr)? (COMMA var_name (ASSIGN logical_expr)?)*
var_type: K_INT | K_FLOAT | K_BOOL | K_STR

for_statement: K_FOR LEFT_PARENTHESIS K_VAR LEFT_PARENTHESIS var_type RIGHT_PARENTHESIS var_name 
               K_FROM (logical_expr | range_expr) RIGHT_PARENTHESIS 
               LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET
range_expr: K_RANGE LEFT_PARENTHESIS logical_expr COMMA logical_expr (COMMA logical_expr)? RIGHT_PARENTHESIS

while_statement: K_WHILE LEFT_PARENTHESIS logical_expr RIGHT_PARENTHESIS 
                 LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET

conditional_statement: K_IF LEFT_PARENTHESIS logical_expr RIGHT_PARENTHESIS LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET 
                       (K_ELIF LEFT_PARENTHESIS logical_expr RIGHT_PARENTHESIS LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET)*
                       (K_ELSE LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET)?

func_call_statement: IDENTIFIER LEFT_PARENTHESIS (logical_expr (COMMA logical_expr)*)? RIGHT_PARENTHESIS

assignment_statement: var_name (ASSIGN | PLUS_ASSIGN | MINUS_ASSIGN | MULTIPLICATION_ASSIGN | 
                                FLOAT_DIVISION_ASSIGN | INT_DIVISION_ASSIGN | MODULO_ASSIGN) logical_expr

empty_statement: 

logical_expr: comparison_expr ((K_AND | K_OR) comparison_expr)*
comparison_expr: K_NOT comparison_expr | 
                 arithmetic_expr ((EQUALS | NOT_EQUALS | LESS_THAN 
                                          | LESS_THAN_OR_EQUALS 
                                          | GREATER_THAN 
                                          | GREATER_THAN_OR_EQUALS) arithmetic_expr)*

arithmetic_expr: term((PLUS | MINUS) term)*
term: factor((MULTIPLICATION | INT_DIVISION | FLOAT_DIVISION | MODULO) factor)*

factor: (INT | FLOAT | BOOL | STR) 
        | LEFT_PARENTHESIS logical_expr RIGHT_PARENTHESIS 
        | (PLUS | MINUS) factor 
        | var_name

var_name: IDENTIFIER
